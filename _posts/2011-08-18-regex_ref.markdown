---
author: dashashi
comments: true
date: 2011-08-18 12:53:44+00:00
layout: post
slug: '%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e5%8f%82%e8%80%83'
title: 正则表达式参考
wordpress_id: 1348
categories:
- 参考资料
---

正则表达式的一个参考，适合懂正则表达式但是忘了具体语法的时候过来看看- -|<!-- more -->
<table cellpadding="2" width="100%" cellspacing="0" border="1" >
<tbody >
<tr >

<td width="20%" >**字符**
</td>

<td width="78%" >**描述**
</td>
</tr>
<tr >

<td width="20%" >_\_
</td>

<td width="78%" >将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，'n' 匹配字符 "n"。'\n' 匹配一个换行符。序列 '\\' 匹配 "\" 而 "\(" 则匹配 "("。
</td>
</tr>
<tr >

<td width="20%" >_^_
</td>

<td width="78%" >匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\n' 或 '\r' 之后的位置。
</td>
</tr>
<tr >

<td width="20%" >_$_
</td>

<td width="78%" >匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\n' 或 '\r' 之前的位置。
</td>
</tr>
<tr >

<td width="20%" >_*_
</td>

<td width="78%" >匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。
</td>
</tr>
<tr >

<td width="20%" >_+_
</td>

<td width="78%" >匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。
</td>
</tr>
<tr >

<td width="20%" >_?_
</td>

<td width="78%" >匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 或 "does" 中的"do" 。? 等价于 {0,1}。
</td>
</tr>
<tr >

<td width="20%" >{_n_}
</td>

<td width="78%" >_n_ 是一个非负整数。匹配确定的 _n_ 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。
</td>
</tr>
<tr >

<td width="20%" >{_n,_}
</td>

<td width="78%" >_n_ 是一个非负整数。至少匹配_n_ 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。
</td>
</tr>
<tr >

<td width="20%" >{_n_,_m_}
</td>

<td width="78%" >_m_ 和 _n_ 均为非负整数，其中_n_ <= _m_。最少匹配 _n_ 次且最多匹配 _m_ 次。例如，"o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。
</td>
</tr>
<tr >

<td width="20%" >_?_
</td>

<td width="78%" >当该字符紧跟在任何一个其他限制符 (*, +, ?, {_n_}, {_n_,}, {_n_,_m_}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 "oooo"，'o+?' 将匹配单个 "o"，而 'o+' 将匹配所有 'o'。
</td>
</tr>
<tr >

<td width="20%" >.
</td>

<td width="78%" >匹配除 "\n" 之外的任何单个字符。要匹配包括 '\n' 在内的任何字符，请使用象 '[.\n]' 的模式。
</td>
</tr>
<tr >

<td width="20%" >(_pattern_)
</td>

<td width="78%" >匹配 _pattern_ 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 **SubMatches** 集合，在JScript 中则使用 **$0**…**$9** 属性。要匹配圆括号字符，请使用 '\(' 或 '\)'。
</td>
</tr>
<tr >

<td width="20%" >(?:_pattern_)
</td>

<td width="78%" >匹配 _pattern_ 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 "或" 字符 (|) 来组合一个模式的各个部分是很有用。例如， 'industr(?:y|ies) 就是一个比 'industry|industries' 更简略的表达式。
</td>
</tr>
<tr >

<td width="20%" >(?=_pattern_)
</td>

<td width="78%" >正向预查，在任何匹配 _pattern_ 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，'Windows (?=95|98|NT|2000)' 能匹配 "Windows 2000" 中的 "Windows" ，但不能匹配 "Windows 3.1" 中的 "Windows"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。
</td>
</tr>
<tr >

<td width="20%" >(?!_pattern_)
</td>

<td width="78%" >负向预查，在任何不匹配 _pattern_ 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如'Windows (?!95|98|NT|2000)' 能匹配 "Windows 3.1" 中的 "Windows"，但不能匹配 "Windows 2000" 中的 "Windows"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始
</td>
</tr>
<tr >

<td width="20%" >_x_|_y_
</td>

<td width="78%" >匹配 _x_ 或 _y_。例如，'z|food' 能匹配 "z" 或 "food"。'(z|f)ood' 则匹配 "zood" 或 "food"。
</td>
</tr>
<tr >

<td width="20%" >[_xyz_]
</td>

<td width="78%" >字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 "plain" 中的 'a'。
</td>
</tr>
<tr >

<td width="20%" >[^_xyz_]
</td>

<td width="78%" >负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 "plain" 中的'p'。
</td>
</tr>
<tr >

<td width="20%" >[_a-z_]
</td>

<td width="78%" >字符范围。匹配指定范围内的任意字符。例如，'[a-z]' 可以匹配 'a' 到 'z' 范围内的任意小写字母字符。
</td>
</tr>
<tr >

<td width="20%" >[^_a-z_]
</td>

<td width="78%" >负值字符范围。匹配任何不在指定范围内的任意字符。例如，'[^a-z]' 可以匹配任何不在 'a' 到 'z' 范围内的任意字符。
</td>
</tr>
<tr >

<td width="20%" >\b
</td>

<td width="78%" >匹配一个**单词边界**，也就是指单词和空格间的位置。例如， 'er\b' 可以匹配"never" 中的 'er'，但不能匹配 "verb" 中的 'er'。
</td>
</tr>
<tr >

<td width="20%" >\B
</td>

<td width="78%" >匹配非单词边界。'er\B' 能匹配 "verb" 中的 'er'，但不能匹配 "never" 中的 'er'。
</td>
</tr>
<tr >

<td width="20%" >\c_x_
</td>

<td width="78%" >匹配由 _x _指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。_x_ 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。
</td>
</tr>
<tr >

<td width="20%" >\d
</td>

<td width="78%" >匹配一个数字字符。等价于 [0-9]。
</td>
</tr>
<tr >

<td width="20%" >\D
</td>

<td width="78%" >匹配一个非数字字符。等价于 [^0-9]。
</td>
</tr>
<tr >

<td width="20%" >\f
</td>

<td width="78%" >匹配一个换页符。等价于 \x0c 和 \cL。
</td>
</tr>
<tr >

<td width="20%" >\n
</td>

<td width="78%" >匹配一个换行符。等价于 \x0a 和 \cJ。
</td>
</tr>
<tr >

<td width="20%" >\r
</td>

<td width="78%" >匹配一个回车符。等价于 \x0d 和 \cM。
</td>
</tr>
<tr >

<td width="20%" >\s
</td>

<td width="78%" >匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。
</td>
</tr>
<tr >

<td width="20%" >\S
</td>

<td width="78%" >匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。
</td>
</tr>
<tr >

<td width="20%" >\t
</td>

<td width="78%" >匹配一个制表符。等价于 \x09 和 \cI。
</td>
</tr>
<tr >

<td width="20%" >\v
</td>

<td width="78%" >匹配一个垂直制表符。等价于 \x0b 和 \cK。
</td>
</tr>
<tr >

<td width="20%" >\w
</td>

<td width="78%" >匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。
</td>
</tr>
<tr >

<td width="20%" >\W
</td>

<td width="78%" >匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。
</td>
</tr>
<tr >

<td width="20%" >\xn
</td>

<td width="78%" >匹配 _n_，其中 _n_ 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，'\x41' 匹配 "A"。'\x041' 则等价于 '\x04' & "1"。正则表达式中可以使用 ASCII 编码。
</td>
</tr>
<tr >

<td width="20%" >\_num_
</td>

<td width="78%" >匹配 _num_，其中 _num_ 是一个正整数。对所获取的匹配的引用。例如，'(.)\1' 匹配两个连续的相同字符。
</td>
</tr>
<tr >

<td width="20%" >\_n_
</td>

<td width="78%" >标识一个八进制转义值或一个向后引用。如果 \_n_ 之前至少 _n_ 个获取的子表达式，则 _n_ 为向后引用。否则，如果 _n_ 为八进制数字 (0-7)，则 _n_ 为一个八进制转义值。
</td>
</tr>
<tr >

<td width="20%" >\_nm_
</td>

<td width="78%" >标识一个八进制转义值或一个向后引用。如果 \_nm_ 之前至少有 _nm_ 个获得子表达式，则 _nm_ 为向后引用。如果 \_nm_ 之前至少有 _n_ 个获取，则 _n_ 为一个后跟文字 _m _的向后引用。如果前面的条件都不满足，若 _n_ 和 _m_ 均为八进制数字 (0-7)，则 \_nm_ 将匹配八进制转义值 _nm_。
</td>
</tr>
<tr >

<td width="20%" >\_nm_l
</td>

<td width="78%" >如果 _n_ 为八进制数字 (0-3)，且 _m_ 和 _l_ 均为八进制数字 (0-7)，则匹配八进制转义值 _nml。_
</td>
</tr>
<tr >

<td width="20%" >_/i_
</td>

<td width="78%" >使正则表达式对大小写不敏感, (?-i)是关闭大小写不敏感
(?i)te(?-i)st应该匹配TEst，但是不能匹配teST或TEST.
</td>
</tr>
<tr >

<td width="20%" >_/s_
</td>

<td width="78%" >开启“单行模式”，即点号“.”匹配新行符
</td>
</tr>
<tr >

<td width="20%" >_/m_
</td>

<td width="78%" >开启“多行模式”，即“^”和“$”匹配新行符的前面和后面的位置。
</td>
</tr>
<tr >

<td width="20%" >_^[0-9]*$_
</td>

<td width="78%" >只能输入数字
</td>
</tr>
<tr >

<td width="20%" >_^\d{n}$_
</td>

<td width="78%" >只能输入n位的数字
</td>
</tr>
<tr >

<td width="20%" >_^\d{n,}$_
</td>

<td width="78%" >只能输入至少n位的数字
</td>
</tr>
<tr >

<td width="20%" >_^\d{m,n}$_
</td>

<td width="78%" >只能输入m~n位的数字
</td>
</tr>
<tr >

<td width="20%" >_^(0|[1-9][0-9]*)$_
</td>

<td width="78%" >只能输入零和非零开头的数字
</td>
</tr>
<tr >

<td width="20%" >_^[0-9]+(.[0-9]{2})?$_
</td>

<td width="78%" >只能输入有两位小数的正实数
</td>
</tr>
<tr >

<td width="20%" >_^[0-9]+(.[0-9]{1,3})?$_
</td>

<td width="78%" >只能输入有1~3位小数的正实数
</td>
</tr>
<tr >

<td width="20%" >_^\+?[1-9][0-9]*$_
</td>

<td width="78%" >只能输入非零的正整数
</td>
</tr>
<tr >

<td width="20%" >_^\-[1-9][]0-9"*$_
</td>

<td width="78%" >只能输入非零的负整数
</td>
</tr>
<tr >

<td width="20%" >_^.{3}$_
</td>

<td width="78%" >只能输入长度为3的字符
</td>
</tr>
<tr >

<td width="20%" >_^[A-Za-z]+$_
</td>

<td width="78%" >只能输入由26个英文字母组成的字符串
</td>
</tr>
<tr >

<td width="20%" >_^[A-Za-z0-9]+$_
</td>

<td width="78%" >只能输入由数字和26个英文字母组成的字符串
</td>
</tr>
<tr >

<td width="20%" >_^\w+$_
</td>

<td width="78%" >只能输入由数字、26个英文字母或者下划线组成的字符串
</td>
</tr>
<tr >

<td width="20%" >_^[a-zA-Z]\w{5,17}$_
</td>

<td width="78%" >验证用户密码：以字母开头，长度在6~18之间，只能包含字符、数字和下划线。
</td>
</tr>
<tr >

<td width="20%" >_[^%&',;=?$\x22]+_
</td>

<td width="78%" >验证是否含有^%&',;=?$\"等字符
</td>
</tr>
<tr >

<td width="20%" >_^[\u4e00-\u9fa5]{0,}$_
</td>

<td width="78%" >只能输入汉字
</td>
</tr>
<tr >

<td width="20%" >_^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$_
</td>

<td width="78%" >验证Email地址
</td>
</tr>
<tr >

<td width="20%" >_^_[_http://([_](http://%28[/)_\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?$_
</td>

<td width="78%" >验证InternetURL
</td>
</tr>
<tr >

<td width="20%" >_^\d{15}|\d{18}$_
</td>

<td width="78%" >验证身份证号（15位或18位数字）
</td>
</tr>
<tr >

<td width="20%" >_^((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)$_
</td>

<td width="78%" >验证IP地址
</td>
</tr>
<tr >

<td width="20%" >_(\w)\1_
</td>

<td width="78%" >匹配两个两个重叠出现的字符
例如，"aabbc11asd"， 返回结果为aa bb 11三组match
</td>
</tr>
<tr >

<td width="20%" >_<(?<tag>[^\s>]+)[^>]*>.*</\k<tag>>_
</td>

<td width="78%" >匹配成对的HTML标签
</td>
</tr>
<tr >

<td width="20%" >_(?!)_
</td>

<td width="78%" >不出现，负声明
下例演示如何取得一个<a>标签对中的全部内容，即使其中包含别的HTML tag。







    
    string newsContent = @"url:<a href=""1.html""><img src=""1.gif"">test<span style=""color:red;"">






    
    Regex</span></a>.";



    
    Regex regEnd = new Regex(@"<\s*a[^>]*>([^<]|<(?!/a))*<\s*/a\s*>",RegexOptions.Multiline);







</td>
</tr>
</tbody>
</table>
